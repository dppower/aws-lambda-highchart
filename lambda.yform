AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Outputs:
  ApiKeyLocation:
    Description: The location of the api key needed to make requests, set header "x-api-key"
      to value provided there
    Value: 
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/apigateway/home#/api-keys/${APIKey}
  SaveChartUrl:
    Description: The url to make requests
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: RestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com
        - /dev/save-chart

Parameters:
  APIName:
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
    Description: Name of the API
    MaxLength: '20'
    MinLength: '3'
    Type: String
  ChartOutputBucket:
    Type: String
    Description: The name of the bucket to save charts
  CodeBucket:
    Type: String
    Description: The bucket name containing the lambda package
  CodePackage:
    Type: String
    Description: The name of the lambda package <path>/<package-name>

Resources:
  PhantomLambda:
    Type: AWS::Serverless::Function
    Properties:
        Handler: "src/index.handler"
        Runtime: nodejs8.10
        Policies:
          - AmazonS3FullAccess
        Timeout: 10
        MemorySize: 512     
        CodeUri:
          Bucket: !Ref InputsBucket
          Key: !Ref CodePackage
        Environment:
          Variables:
            BUCKETNAME: !Ref ChartOutputBucket

  LambdaPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PhantomLambda
        - Arn
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission

  RestApi:
    Properties:
      Body:
        swagger: "2.0"
        info:
          version: "2018-07-02T15:03:38Z"
          title: "savechartapi"
        schemes:
        - "https"
        paths:
          /save-chart:
            post:
              consumes:
              - "application/json"
              - "application/x-www-form-urlencoded"
              produces:
              - "application/json"
              - "text/plain"
              parameters:
              - in: "body"
                name: "ChartOptions"
                required: true
                schema:
                  $ref: "#/definitions/ChartOptions"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Url"
                  headers:
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Error"
                  headers:
                    Content-Type:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                  headers:
                    Content-Type:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri:
-                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PhantomLambda.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Accept"
                    responseTemplates:
                      application/json: "{\n\"url\": $input.json('$')\n}"
                      text/plain: "$input.path('$')"
                  ^Invalid.*$:
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Accept"
                    responseTemplates:
                      application/json: "{\n\"message\": $input.json('$.errorMessage')\n}"
                      text/plain: "$input.path('$.errorMessage')"
                  ^Error.*$:
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Accept"
                    responseTemplates:
                      application/json: "{\n\"message\": $input.json('$.errorMessage')\n}"
                      text/plain: "$input.path(\"$.errorMessage\")"
                passthroughBehavior: "never"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
                    ##  This template will pass through all parameters including path, querystring,\
                    \ header, stage variables, and context through to the integration endpoint\
                    \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
                    \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
                    \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
                    \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                    \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
                    #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
                    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
                    \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
                    \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
                    ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
                    \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
                    ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                    ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                    ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                    ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                    ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
                    $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
                    ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
                    $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
                    ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
                    \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
                    \n    }\n}\n"
                  application/x-www-form-urlencoded: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
                    ##  This template will pass through all parameters including path, querystring,\
                    \ header, stage variables, and context through to the integration endpoint\
                    \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body\"\
                    \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
                    \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
                    \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                    \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
                    #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
                    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
                    \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
                    \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
                    ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
                    \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
                    ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                    ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                    ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                    ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                    ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
                    $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
                    ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
                    $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
                    ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
                    \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
                    \n    }\n}\n"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          PlainText:
            type: "string"
          Error:
            type: "object"
            required:
            - "message"
            properties:
              message:
                type: "string"
          Url:
            type: "object"
            required:
            - "url"
            properties:
              url:
                type: "string"
          ChartOptions:
            type: "object"
            required:
            - "options"
            - "type"
            properties:
              options:
                type: "object"
                properties: {}
              callback:
                type: "string"
              type:
                type: "string"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
      EndpointConfiguration:
        Types:
        - EDGE
    Type: AWS::ApiGateway::RestApi

  APIKey:
    Properties:
      Enabled: true
      Name:
        Fn::Sub: ${AWS::StackName}-${APIName}-Key
    Type: AWS::ApiGateway::ApiKey

  UsagePlan:
    Properties:
      ApiStages:
      - ApiId:
          Ref: RestApi
        Stage:
          Ref: DevelopmentStage
      Quota:
        Limit: 1000000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName:
        Fn::Sub: ${AWS::StackName}-${APIName}-DeveloperUsage
    Type: AWS::ApiGateway::UsagePlan

  UsagePlanKey:
    Properties:
      KeyId:
        Ref: APIKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: UsagePlan
    Type: AWS::ApiGateway::UsagePlanKey

  Deployment:
    Properties:
      RestApiId:
        Ref: RestApi
      StageName: default
    Type: AWS::ApiGateway::Deployment

  DevelopmentStage:
    Properties:
      DeploymentId:
        Ref: Deployment
      RestApiId:
        Ref: RestApi
      StageName: dev
    Type: AWS::ApiGateway::Stage