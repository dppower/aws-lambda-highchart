AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Outputs:
  ApiKeyLocation:
    Description: The location of the api key needed to make requests, set header "x-api-key"
      to value provided there
    Value: 
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/apigateway/home#/api-keys/${APIKey}
  SaveChartUrl:
    Description: The url to make requests
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: RestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com
        - /dev/save-chart

Parameters:
  APIName:
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
    Description: Name of the API
    MaxLength: '20'
    MinLength: '3'
    Type: String
  ChartOutputBucket:
    Type: String
    Description: The name of the bucket to save charts
  CodeBucket:
    Type: String
    Description: The bucket name containing the lambda package
  CodePackage:
    Type: String
    Description: The name of the lambda package <path>/<package-name>

Resources:
  PhantomLambda:
    Type: AWS::Serverless::Function
    Properties:
        Handler: "src/index.handler"
        Runtime: nodejs8.10
        Policies:
          - AmazonS3FullAccess
        Timeout: 10
        MemorySize: 512     
        CodeUri:
          Bucket: !Ref CodeBucket
          Key: !Ref CodePackage
        Environment:
          Variables:
            BUCKETNAME: !Ref ChartOutputBucket

  LambdaPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PhantomLambda
        - Arn
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission

  RestApi:
    Properties:
      ApiKeySourceType: HEADER
      Name: "savechartapi"
      EndpointConfiguration:
        Types:
        - EDGE
    Type: AWS::ApiGateway::RestApi

  PlainTextModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      Name: PlainText
      ContentType: "application/json"
      Schema:
        type: "string"
  
  ErrorMessageModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      Name: ErrorMessage
      ContentType: "application/json"
      Schema:
        type: "object"
        required:
        - "message"
        properties:
          message:
            type: "string"
  UrlModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      Name: Url
      ContentType: "application/json"
      Schema:
        type: "object"
        required:
        - "url"
        properties:
          url:
            type: "string"

  ChartOptionsModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      Name: ChartOptions
      ContentType: "application/json"
      Schema:
        type: "object"
        required:
        - "options"
        - "type"
        properties:
          options:
            type: "object"
            properties: {}
          callback:
            type: "string"
          type:
            type: "string"

  SaveChartResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "save-chart"

  BodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: "BodyValidator"
      RestApiId: !Ref RestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false

  SaveChartMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref SaveChartResource
      RestApiId: !Ref RestApi
      RequestModels:
        "application/json": !Ref ChartOptionsModel
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": !Ref UrlModel
            "text/plain": !Ref PlainTextModel
          ResponseParameters:
            "method.response.header.Content-Type": true
        - StatusCode: "400"
          ResponseModels:
            "application/json": !Ref ErrorMessageModel
            "text/plain": !Ref PlainTextModel
          ResponseParameters:
            "method.response.header.Content-Type": true
        - StatusCode: "500"
          ResponseModels:
            "application/json": !Ref ErrorMessageModel
            "text/plain": !Ref PlainTextModel
          ResponseParameters:
            "method.response.header.Content-Type": true
      RequestValidatorId: !Ref BodyValidator
      Integration:
        Type: AWS
        Uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PhantomLambda.Arn}/invocations
        RequestTemplates:
          "application/json": "#set($allParams = $input.params())\n{\n\"body\" : $input.json('$'),\n\
            \"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params\
            \ = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in\
            \ $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n}\n}\n"
          "application/x-www-form-urlencoded": "#set($allParams = $input.params())\n{\n\"body\" : $input.json('$'),\n\
            \"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params\
            \ = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in\
            \ $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
            #end\n}\n}\n"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              "method.response.header.Content-Type": "integration.response.header.Accept"
            ResponseTemplates:
              "application/json": "{\n\"url\": $input.json('$')\n}"
              "text/plain": "$input.path('$')"
          - SelectionPattern: "^Invalid.*$"
            StatusCode: "400"
            ResponseParameters:
              "method.response.header.Content-Type": "integration.response.header.Accept"
            ResponseTemplates:
              "application/json": "{\n\"message\": $input.json('$.errorMessage')\n}"
              "text/plain": "$input.path('$.errorMessage')"
          - SelectionPattern: "^Error.*$" 
            StatusCode: "500"
            ResponseParameters:
              "method.response.header.Content-Type": "integration.response.header.Accept"
            ResponseTemplates:
              "application/json": "{\n\"message\": $input.json('$.errorMessage')\n}"
              "text/plain": "$input.path(\"$.errorMessage\")"
        PassthroughBehavior: NEVER
        IntegrationHttpMethod: POST
        ContentHandling: CONVERT_TO_TEXT

  APIKey:
    Properties:
      Enabled: true
      Name:
        Fn::Sub: ${AWS::StackName}-${APIName}-Key
    Type: AWS::ApiGateway::ApiKey

  UsagePlan:
    Properties:
      ApiStages:
      - ApiId:
          Ref: RestApi
        Stage:
          Ref: DevelopmentStage
      Quota:
        Limit: 1000000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName:
        Fn::Sub: ${AWS::StackName}-${APIName}-DeveloperUsage
    Type: AWS::ApiGateway::UsagePlan

  UsagePlanKey:
    Properties:
      KeyId:
        Ref: APIKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: UsagePlan
    Type: AWS::ApiGateway::UsagePlanKey

  Deployment:
    DependsOn: "SaveChartMethod"
    Properties:
      RestApiId:
        Ref: RestApi
      StageName: default
    Type: AWS::ApiGateway::Deployment

  DevelopmentStage:
    Properties:
      DeploymentId:
        Ref: Deployment
      RestApiId:
        Ref: RestApi
      StageName: dev
    Type: AWS::ApiGateway::Stage